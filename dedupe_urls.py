#!/usr/bin/env python3
import json
import sys
from urllib.parse import urlparse
import re

def normalize_url(url):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    # http -> https
    normalized = url.replace('http://', 'https://')
    # –£–±–∏—Ä–∞–µ–º :80
    normalized = normalized.replace(':80/', '/')
    # –£–±–∏—Ä–∞–µ–º trailing slash (–∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π)
    if normalized.endswith('/') and normalized.count('/') > 3:
        normalized = normalized[:-1]
    return normalized

def content_normalize_url(url):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
    normalized = re.sub(r'-\d+/?$', '', url)
    # –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    normalized = normalized.split('?')[0]
    # –£–±–∏—Ä–∞–µ–º —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    normalized = normalized.split('#')[0]
    return normalized

def deduplicate_urls(input_file, output_file):
    """–î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç URL –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞"""

    print(f"üîç –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: {input_file}")

    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return

    if not data:
        print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π")
        return

    print(f"üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(data)}")

    # –≠—Ç–∞–ø 1: –ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    protocol_dedup = {}
    for item in data:
        url = item['original']
        normalized = normalize_url(url)

        if normalized not in protocol_dedup:
            protocol_dedup[normalized] = item
        else:
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            current = protocol_dedup[normalized]

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: HTTPS > HTTP, –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä, —Å–≤–µ–∂–µ–µ –≤—Ä–µ–º—è
            if (url.startswith('https://') and not current['original'].startswith('https://')) or \
                    (url.startswith('https://') == current['original'].startswith('https://') and
                     item['size'] > current['size']):
                protocol_dedup[normalized] = item

    stage1_result = list(protocol_dedup.values())
    print(f"‚úÖ –ü–æ—Å–ª–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(stage1_result)}")

    # –≠—Ç–∞–ø 2: –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è
    content_dedup = {}
    for item in stage1_result:
        url = item['original']
        content_key = content_normalize_url(url)

        if content_key not in content_dedup:
            content_dedup[content_key] = item
        else:
            current = content_dedup[content_key]

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: –±–µ–∑ –Ω–æ–º–µ—Ä–∞ > —Å –Ω–æ–º–µ—Ä–æ–º, –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
            has_number = bool(re.search(r'-\d+/?$', url))
            current_has_number = bool(re.search(r'-\d+/?$', current['original']))

            if (not has_number and current_has_number) or \
                    (has_number == current_has_number and item['size'] > current['size']):
                content_dedup[content_key] = item

    final_result = list(content_dedup.values())
    print(f"‚úÖ –ü–æ—Å–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(final_result)}")

    # –î–æ–±–∞–≤–ª—è–µ–º priority_score
    for item in final_result:
        url = item['original']
        path_depth = len([p for p in url.split('/')[3:] if p])
        size_score = item['size'] / 1000
        depth_score = max(0, 50 - path_depth * 5)
        https_bonus = 5 if url.startswith('https://') else 0
        encoding_penalty = url.count('%')

        item['priority_score'] = size_score + depth_score + https_bonus - encoding_penalty

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    final_result.sort(key=lambda x: x['priority_score'], reverse=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(final_result, f, indent=2, ensure_ascii=False)
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 dedupe_urls.py input_file output_file")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]

    deduplicate_urls(input_file, output_file)