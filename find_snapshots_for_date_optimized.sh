#!/bin/bash

DOMAIN="$1"
TARGET_DATE="$2"

if [ -z "$DOMAIN" ] || [ -z "$TARGET_DATE" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 DOMAIN TARGET_DATE"
    echo "–ü—Ä–∏–º–µ—Ä: $0 ba.org.ua 20191115"
    echo "TARGET_DATE –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
if ! [[ "$TARGET_DATE" =~ ^[0-9]{8}$ ]]; then
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYYMMDD"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–∞
MASTER_LIST="${DOMAIN}_master_list.json"
if [ ! -f "$MASTER_LIST" ]; then
    echo "‚ùå –ú–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: $MASTER_LIST"
    echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./create_master_list.sh $DOMAIN"
    exit 1
fi

echo "üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–∏—Å–∫ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–ª—è $DOMAIN –Ω–∞ –¥–∞—Ç—É $TARGET_DATE"
echo "=============================================================="

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞—Ç—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS –∏ Linux)
calculate_date() {
    local base_date="$1"
    local days_offset="$2"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYYMMDD –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    local year="${base_date:0:4}"
    local month="${base_date:4:2}"
    local day="${base_date:6:2}"
    local formatted_date="$year-$month-$day"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–° –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v gdate >/dev/null 2>&1; then
            # GNU date —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ homebrew
            gdate -d "$formatted_date $days_offset days" +%Y%m%d
        else
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π date —Å –¥—Ä—É–≥–∏–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
            date -j -v"${days_offset}d" -f "%Y-%m-%d" "$formatted_date" +%Y%m%d 2>/dev/null || {
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Python
                python3 -c "
import datetime
base = datetime.datetime.strptime('$formatted_date', '%Y-%m-%d')
result = base + datetime.timedelta(days=$days_offset)
print(result.strftime('%Y%m%d'))
"
            }
        fi
    else
        # Linux
        date -d "$formatted_date $days_offset days" +%Y%m%d
    fi
}

# –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ ¬±90 –¥–Ω–µ–π
echo "üîÑ –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ..."
FROM_DATE=$(calculate_date "$TARGET_DATE" "-90")
TO_DATE=$(calculate_date "$TARGET_DATE" "90")

if [ -z "$FROM_DATE" ] || [ -z "$TO_DATE" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã."
    exit 1
fi

echo "üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: $FROM_DATE - $TO_DATE"

# –ù–û–í–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: –û–¥–∏–Ω –±–æ–ª—å—à–æ–π CDX –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Å—å –¥–æ–º–µ–Ω
echo "üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: –û–¥–∏–Ω –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ —Ç—ã—Å—è—á –º–∞–ª–µ–Ω—å–∫–∏—Ö"
echo ""

SNAPSHOT_FILE="${DOMAIN}_snapshots_${TARGET_DATE}.json"
TEMP_CDX_FILE="${DOMAIN}_cdx_${TARGET_DATE}.json"
TEMP_MATCHED_FILE="${DOMAIN}_matched_${TARGET_DATE}.json"

echo "üåê –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–æ–º–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥..."
echo "   (–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥)"

# –û–¥–∏–Ω –º–µ–≥–∞-–∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ—Å—å –¥–æ–º–µ–Ω –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
curl -s "http://web.archive.org/cdx/search/cdx?url=${DOMAIN}/*&from=$FROM_DATE&to=$TO_DATE&output=json&fl=timestamp,original,statuscode,mimetype,length&filter=statuscode:200&filter=mimetype:text/html&limit=100000" > "$TEMP_CDX_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
if [ ! -s "$TEMP_CDX_FILE" ] || ! jq empty "$TEMP_CDX_FILE" 2>/dev/null; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç CDX API"
    rm -f "$TEMP_CDX_FILE"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤
CDX_COUNT=$(($(jq length "$TEMP_CDX_FILE") - 1))
echo "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –∏–∑ –∞—Ä—Ö–∏–≤–∞: $CDX_COUNT"

if [ "$CDX_COUNT" -le 0 ]; then
    echo "‚ùå –°–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ"
    rm -f "$TEMP_CDX_FILE"
    exit 1
fi

echo ""
echo "üß† –®–∞–≥ 2: –£–º–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–æ–º..."

# Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
python3 << EOF
import json
import sys
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
print("üìñ –ß–∏—Ç–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–æ–∫...")
with open("$MASTER_LIST", "r") as f:
    master_list = json.load(f)

print("üìñ –ß–∏—Ç–∞–µ–º CDX –¥–∞–Ω–Ω—ã–µ...")
with open("$TEMP_CDX_FILE", "r") as f:
    cdx_data = json.load(f)

if len(cdx_data) <= 1:
    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CDX —Ñ–∞–π–ª–µ")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å CDX –¥–∞–Ω–Ω—ã—Ö –ø–æ URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
print("üîç –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º CDX –¥–∞–Ω–Ω—ã–µ...")
cdx_index = {}
target_timestamp = int("${TARGET_DATE}000000")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CDX –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
for row in cdx_data[1:]:
    if len(row) >= 5:
        try:
            timestamp = row[0]
            original = row[1]
            statuscode = row[2]
            mimetype = row[3]
            size = int(row[4]) if row[4] and row[4].isdigit() else 0

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            snap_timestamp = int(timestamp)
            time_diff = abs(snap_timestamp - target_timestamp)

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ URL —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–π —Å–Ω–∞–ø—à–æ—Ç
            if original not in cdx_index or time_diff < cdx_index[original]['time_diff']:
                cdx_index[original] = {
                    'timestamp': timestamp,
                    'original': original,
                    'statuscode': statuscode,
                    'mimetype': mimetype,
                    'size': size,
                    'time_diff': time_diff,
                    'days_diff': time_diff // 1000000  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
                }
        except (ValueError, IndexError):
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏

print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL –≤ CDX: {len(cdx_index)}")

# –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–æ–º
print("üéØ –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–æ–º...")
matched_snapshots = []

for master_item in master_list:
    original_url = master_item['original']

    if original_url in cdx_index:
        cdx_item = cdx_index[original_url]

        snapshot = {
            'archive_url': f"https://web.archive.org/web/{cdx_item['timestamp']}/{original_url}",
            'timestamp': cdx_item['timestamp'],
            'original_url': original_url,
            'statuscode': cdx_item['statuscode'],
            'size': cdx_item['size'],
            'days_diff': cdx_item['days_diff']
        }

        matched_snapshots.append(snapshot)

print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matched_snapshots)}")

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–µ
matched_snapshots.sort(key=lambda x: x['days_diff'])

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
with open("$SNAPSHOT_FILE", "w") as f:
    json.dump(matched_snapshots, f, indent=2, ensure_ascii=False)

print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $SNAPSHOT_FILE")
EOF

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Python —Å–∫—Ä–∏–ø—Ç–∞
if [ $? -ne 0 ]; then
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -f "$TEMP_CDX_FILE" "$TEMP_MATCHED_FILE"

# –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if [ -f "$SNAPSHOT_FILE" ]; then
    final_count=$(jq length "$SNAPSHOT_FILE" 2>/dev/null || echo "0")
    master_count=$(jq length "$MASTER_LIST" 2>/dev/null || echo "0")

    echo ""
    echo "üéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!"
    echo "======================================"
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo "  üìÑ URL –≤ –º–∞—Å—Ç–µ—Ä-—Å–ø–∏—Å–∫–µ: $master_count"
    echo "  üì∏ –ù–∞–π–¥–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: $final_count"

    if [ "$master_count" -gt 0 ]; then
        success_rate=$(( final_count * 100 / master_count ))
        echo "  ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $success_rate%"
    fi

    if [ "$final_count" -gt 0 ]; then
        echo ""
        echo "üéØ –¢–û–ü-5 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤:"
        jq -r '.[:5] | .[] | "  \(.days_diff) –¥–Ω–µ–π: \(.original_url)"' "$SNAPSHOT_FILE"

        echo ""
        echo "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –æ—Ç —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã:"
        jq -r 'group_by(.days_diff) | map({days: .[0].days_diff, count: length}) | sort_by(.days) | .[:8] | .[] | "  \(.days) –¥–Ω–µ–π: \(.count) —Å–Ω–∞–ø—à–æ—Ç–æ–≤"' "$SNAPSHOT_FILE"
    fi

    echo ""
    echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: $SNAPSHOT_FILE"
    echo ""
    echo "üöÄ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:"
    echo "poetry run wayback-analyzer download-snapshot $DOMAIN --date $TARGET_DATE"
else
    echo "‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
    exit 1
fi