"""Command-line interface for Wayback Analyzer."""

import click
import logging
import time
from datetime import datetime
from ..core.client import WaybackClient


@click.group()
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose logging')
def main(verbose: bool):
    """Wayback Machine Analyzer CLI."""
    if verbose:
        logging.basicConfig(level=logging.DEBUG)


@main.command()
@click.argument('domain')
@click.option('--limit', default=10, help='Maximum snapshots to show')
def snapshots(domain: str, limit: int):
    """Get snapshots for a domain."""
    click.echo(f"Getting snapshots for: {domain}")

    client = WaybackClient()
    snapshots = client.get_snapshots(f"http://{domain}", limit=limit)

    if snapshots:
        click.echo(f"Found {len(snapshots)} snapshots:")
        for snapshot in snapshots:
            click.echo(f"  {snapshot}")
    else:
        click.echo("No snapshots found.")


@main.command()
def test():
    """Test connection to Wayback Machine."""
    client = WaybackClient()
    if client.test_connection():
        click.echo("‚úÖ Connection to Wayback Machine successful!")
    else:
        click.echo("‚ùå Failed to connect to Wayback Machine")


# –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–û–ë–ê–í–õ–Ø–ô–¢–ï –ó–î–ï–°–¨ –ü–û–°–õ–ï main
@main.command()
@click.argument('site_url')
@click.option('--target-date', help='–¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
@click.option('--output-dir', default='./political_archives', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
@click.option('--max-pages', default=500, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü')
@click.option('--max-depth', default=4, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞')
@click.option('--rate-limit', default=2.0, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏')
def crawl_political_site(site_url, target_date, output_dir, max_pages, max_depth, rate_limit):
    """–ü–æ–ª–Ω—ã–π –æ–±—Ö–æ–¥ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞."""
    from pathlib import Path
    from ..core.storage_manager import StorageManager
    from ..core.enhanced_crawler import EnhancedSnapshotCrawler
    from ..utils.rate_limiter import RateLimiter

    click.echo(f"üá∫üá¶ –û–±—Ö–æ–¥ —Å–∞–π—Ç–∞: {site_url}")

    storage_manager = StorageManager(Path(output_dir))
    rate_limiter = RateLimiter(requests_per_second=1.0/rate_limit)

    crawler = EnhancedSnapshotCrawler(
        storage_manager=storage_manager,
        rate_limiter=rate_limiter,
        max_depth=max_depth,
        max_pages=max_pages
    )

    try:
        summary = crawler.crawl_political_site(site_url, target_date)
        click.echo(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {summary['total_pages_found']} —Å—Ç—Ä–∞–Ω–∏—Ü")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@main.command()
@click.argument('domain')
@click.option('--date', required=True, help='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD')
@click.option('--output-dir', default='./snapshots', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤')
@click.option('--rate-limit', default=2.0, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
@click.option('--max-concurrent', default=3, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫')
@click.option('--resume', is_flag=True, help='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É')
def download_snapshot(domain, date, output_dir, rate_limit, max_concurrent, resume):
    """–°–∫–∞—á–∞—Ç—å —Å–Ω–∞–ø—à–æ—Ç —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ URL."""
    import json
    import asyncio
    from pathlib import Path
    from ..core.snapshot_downloader import SnapshotDownloader
    from ..core.storage_manager import StorageManager
    from ..utils.rate_limiter import RateLimiter

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not date.isdigit() or len(date) != 8:
        click.echo("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYYMMDD")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å–æ —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏
    snapshots_file = f"{domain}_snapshots_{date}.json"

    if not Path(snapshots_file).exists():
        click.echo(f"‚ùå –§–∞–π–ª —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {snapshots_file}")
        click.echo(f"–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: ./find_snapshots_for_date.sh {domain} {date}")
        return

    click.echo(f"üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç–∞ {domain} –Ω–∞ –¥–∞—Ç—É {date}")
    click.echo("=" * 60)

    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–Ω–∞–ø—à–æ—Ç–æ–≤
    try:
        with open(snapshots_file, 'r', encoding='utf-8') as f:
            snapshots = json.load(f)
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {e}")
        return

    if not snapshots:
        click.echo("‚ùå –°–ø–∏—Å–æ–∫ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –ø—É—Å—Ç–æ–π")
        return

    click.echo(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {len(snapshots)}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    storage_manager = StorageManager(Path(output_dir))
    rate_limiter = RateLimiter(requests_per_second=1.0/rate_limit)

    downloader = SnapshotDownloader(
        storage_manager=storage_manager,
        rate_limiter=rate_limiter,
        max_concurrent=max_concurrent,
        resume_mode=resume
    )

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    try:
        loop = asyncio.get_event_loop()
        result = loop.run_until_complete(
            downloader.download_snapshot_batch(domain, date, snapshots)
        )

        click.echo(f"\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        click.echo(f"üìÑ –£—Å–ø–µ—à–Ω–æ: {result['successful']}")
        click.echo(f"‚ùå –û—à–∏–±–æ–∫: {result['failed']}")
        click.echo(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['duration_minutes']:.1f} –º–∏–Ω")
        click.echo(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_dir}/snapshots/{domain}/{date}/")

    except KeyboardInterrupt:
        click.echo("\n‚èπÔ∏è  –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        click.echo(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()