# src/wayback_analyzer/cli/political_scraper.py
import click
from datetime import date, datetime
from pathlib import Path
import asyncio
import logging

from ..models.political_events import UKRAINE_POLITICAL_EVENTS, EventType
from ..core.snapshot_finder import PoliticalSnapshotFinder
from ..core.site_crawler import ArchiveSiteCrawler
from ..core.content_downloader import MassContentDownloader
from ..core.storage_manager import StorageManager
from ..utils.rate_limiter import RateLimiter

@click.group()
def political():
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–∏—Ö –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π."""
    pass

@political.command()
@click.argument('site_url')
@click.option('--event-dates', '-e', multiple=True, help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (YYYY-MM-DD)')
@click.option('--event-types', '-t', multiple=True,
              type=click.Choice(['election', 'war', 'covid', 'legislation', 'international']),
              help='–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
@click.option('--days-before', default=30, help='–î–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤')
@click.option('--days-after', default=30, help='–î–Ω–µ–π –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–Ω–∞–ø—à–æ—Ç–æ–≤')
@click.option('--output-dir', default='./political_data', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
@click.option('--max-depth', default=2, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞ —Å–∞–π—Ç–∞')
@click.option('--rate-limit', default=1.0, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)')
def scrape_political_site(site_url, event_dates, event_types, days_before, days_after,
                          output_dir, max_depth, rate_limit):
    """–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π."""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    click.echo(f"üá∫üá¶ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π—Ç–∞: {site_url}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    rate_limiter = RateLimiter(delay=rate_limit)
    storage_manager = StorageManager(base_path=Path(output_dir))
    snapshot_finder = PoliticalSnapshotFinder()
    site_crawler = ArchiveSiteCrawler(rate_limiter, max_depth=max_depth)
    content_downloader = MassContentDownloader(storage_manager)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    events_to_analyze = []

    if event_dates:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞—Ç—ã
        for date_str in event_dates:
            try:
                event_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                events_to_analyze.append({
                    'name': f'Custom_Event_{date_str}',
                    'date': event_date,
                    'type': 'custom'
                })
            except ValueError:
                click.echo(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
                return
    else:
        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        filter_types = set(event_types) if event_types else None

        for event in UKRAINE_POLITICAL_EVENTS:
            if filter_types is None or event.event_type.value in filter_types:
                events_to_analyze.append(event)

    if not events_to_analyze:
        click.echo("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    click.echo(f"üìÖ –ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(events_to_analyze)} —Å–æ–±—ã—Ç–∏–π")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ
    for event in events_to_analyze:
        click.echo(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏—è: {event.name if hasattr(event, 'name') else event['name']}")

        # –ù–∞—Ö–æ–¥–∏–º —Å–Ω–∞–ø—à–æ—Ç—ã
        snapshots = snapshot_finder.find_event_snapshots(
            site_url, event, days_before, days_after
        ) if hasattr(event, 'name') else snapshot_finder.find_event_snapshots(
            site_url, event, days_before, days_after
        )

        total_snapshots = len(snapshots['before_event']) + len(snapshots['after_event'])
        click.echo(f"  üì∏ –ù–∞–π–¥–µ–Ω–æ —Å–Ω–∞–ø—à–æ—Ç–æ–≤: {total_snapshots}")

        if total_snapshots == 0:
            click.echo("  ‚ö†Ô∏è  –°–Ω–∞–ø—à–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        # –û–±—Ö–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞
        all_pages = []

        for period, snapshot_list in [('before', snapshots['before_event']),
                                      ('after', snapshots['after_event'])]:

            for snapshot in snapshot_list[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                click.echo(f"    üï∑Ô∏è  –û–±—Ö–æ–¥ —Å–Ω–∞–ø—à–æ—Ç–∞ {snapshot['timestamp']} ({period})")

                domain = site_url.replace('http://', '').replace('https://', '').split('/')[0]
                pages = site_crawler.discover_site_structure(snapshot['url'], domain)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                for page in pages:
                    page['event_period'] = period
                    page['event_name'] = event.name if hasattr(event, 'name') else event['name']
                    page['snapshot_date'] = snapshot['date']

                all_pages.extend(pages)

        click.echo(f"  üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {len(all_pages)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
        if all_pages:
            click.echo(f"  ‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")

            site_name = site_url.replace('http://', '').replace('https://', '').replace('/', '_')
            event_name = event.name if hasattr(event, 'name') else event['name']

            loop = asyncio.get_event_loop()
            result = loop.run_until_complete(
                content_downloader.download_all_pages(all_pages, site_name, event_name)
            )

            click.echo(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {result['successful']} —Å—Ç—Ä–∞–Ω–∏—Ü, –æ—à–∏–±–æ–∫: {result['failed']}")

    click.echo(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

@political.command()
def list_events():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
    click.echo("üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n")

    for event in UKRAINE_POLITICAL_EVENTS:
        click.echo(f"  {event.date} - {event.name}")
        click.echo(f"    –¢–∏–ø: {event.event_type.value}")
        click.echo(f"    –û–ø–∏—Å–∞–Ω–∏–µ: {event.description}")
        click.echo()

if __name__ == "__main__":
    political()